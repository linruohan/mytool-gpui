//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use async_trait::async_trait;
use chrono::NaiveDateTime;
use sea_orm::entity::prelude::*;
use sea_orm::{DbErr, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "items")]
#[serde(rename_all = "camelCase")]
#[derive(Default)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text", unique)]
    pub content: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,

    #[sea_orm(column_type = "Json", nullable)]
    pub due: Option<serde_json::Value>,

    pub added_at: NaiveDateTime,
    #[sea_orm(nullable)]
    pub completed_at: Option<NaiveDateTime>,
    pub updated_at: NaiveDateTime,

    #[sea_orm(column_type = "Text", nullable)]
    pub section_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub project_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub parent_id: Option<String>,

    pub priority: Option<i32>,
    pub child_order: Option<i32>,
    pub day_order: Option<i32>,
    pub checked: bool,
    pub is_deleted: bool,
    pub collapsed: bool,
    pub pinned: bool,
    #[sea_orm(column_type = "Json", nullable)]
    pub labels: Option<serde_json::Value>,
    #[sea_orm(column_type = "Json", nullable)]
    pub extra_data: Option<serde_json::Value>,
    #[sea_orm(column_type = "Text", nullable)]
    pub item_type: Option<String>,
}

#[derive(Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let mut this = self;
        let now = chrono::Utc::now().naive_utc();

        if insert {
            this.id = Set(Uuid::new_v4().to_string());
            this.added_at = Set(now);
        }

        this.updated_at = Set(now);
        Ok(this)
    }
}
